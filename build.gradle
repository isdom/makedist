buildDir = "../public/${appName}"

ext {
    distBuildId = new java.text.SimpleDateFormat("yyyyMMddHHmm_ss").format(new java.util.Date())
    realVersion = appVersion
    distFileName = "$appName-$appVersion-$distBuildId"
    includeToBin = ((ext.has('includeToBin') ? includeToBin : []) << ['*.properties','logback.xml']).flatten()
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'java'
    configurations {
        optional
        compile.extendsFrom optional
    }
    repositories {
        maven {
            url "http://repo.jocean.org/nexus/content/groups/public"
        }
        maven {
            url "https://maven.aliyun.com/repository/central"
        }
    }
    dependencies {
        components {
            all { details ->
                details.statusScheme = ["snapshot", "integration", "milestone", "release"]
            }
        }
    }
}

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all { resolutionStrategy.cacheChangingModulesFor 1, 'minutes' }
}

dependencies {
    compile "${group}:${appName}:${appVersion}"
}

task cleanAll << {
    println "Clean project.."
    delete buildDir
}

task init << {
    println '+---------------------------------------------------+'
    println '|                                                   |'
    println "| M A K E D I S T $appName $appVersion"
    println '|                                                   |'
    println '+---------------------------------------------------+'
}

task makeDist(dependsOn: [init, cleanAll], type: Zip) {
    configurations.runtime.findAll { jar ->
        ["$appName-"].any { jar.name.startsWith(it) }
    }.collect {
        realVersion = new java.util.jar.JarFile(it).manifest.mainAttributes.getValue('Specification-Version');
        distFileName = "$appName-$realVersion-$distBuildId"
    }
    
    into('codedeploy') {
        from 'codedeploy'
        fileMode 0755
    }
    into('lib') {
        from configurations.runtime
        from "$buildDir/version.txt"
    }
    from('ctrl') {
        fileMode 0755
    }
    from 'conf'
    from "$buildDir/module.txt"
    from "$buildDir/appspec.yml"
    archiveName = "${distFileName}.zip"
    destinationDir = rootDir
    duplicatesStrategy = 'exclude'
}

makeDist.doFirst {
    if (!new File("$buildDir/").exists()) {
        new File("$buildDir/").mkdirs()
    }
    
    new File('.').eachFileMatch(~"$appName-.*\\.zip") { it.delete() }
    new File("$buildDir/version.txt").text = "${distFileName}"
    new File("$buildDir/module.txt").text = "${appName}"
    new File("$buildDir/appspec.yml").text = 
        "version: 0.0\r\n" +
        "os: linux\r\n" +
        "files:\r\n" +
        "  - source: /\r\n" +
        "    destination: /home/${appName}/current\r\n" +
        "hooks:\r\n" +
        "  ApplicationStop:\r\n" +
        "    - location: codedeploy/stopAndBackup.sh\r\n" +
        "      timeout: 300\r\n" +
        "      runas: root\r\n" +
        "  BeforeInstall:\r\n" +
        "    - location: codedeploy/install_dependencies.sh\r\n" +
        "      timeout: 300\r\n" + 
        "      runas: root\r\n" +
        "  AfterInstall:\r\n" +
        "    - location: codedeploy/configure.sh\r\n" +
        "      timeout: 300\r\n" +
        "      runas: root\r\n" +
        "  ApplicationStart:\r\n" +
        "    - location: codedeploy/start.sh\r\n" +
        "      timeout: 300\r\n" +
        "      runas: ${appName}\r\n"
}
